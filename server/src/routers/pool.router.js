// routers/pool.router.js

const express = require('express');
const multer = require('multer');
const { Pool } = require('../../db/models'); // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ Pool
const nodemailer = require('nodemailer');
const path = require('path');
const router = express.Router();
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
const uploadDir = path.resolve(__dirname, '../../public/uploads');

if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
},
});
console.log("üöÄ ~ EMAIL_PASS:", process.env.EMAIL_PASS)
console.log("üöÄ ~ EMAIL_USER:", process.env.EMAIL_USER)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
router.post('/submit', upload.single('userImg'), async (req, res) => {
  const { userName, userEmail, userPhone } = req.body;
  const filePath = req.file ? `${req.file.filename}` : null;

  try {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Sequelize
    await Pool.create({
      userName,
      userEmail,
      userPhone,
      userImg: filePath,
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: userEmail,
      subject: '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —á–∞—Å—ã –ø—Ä–∏–Ω—è—Ç',
      text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}!\n\n–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.\n\n–°–ø–∞—Å–∏–±–æ!`,
    });

    res.status(200).json({ message: '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã' });
  }
});

module.exports = router;
