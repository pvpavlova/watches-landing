const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const { verifyAccessToken } = require('../middlewares/verifyTokens');  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ access token
const authAdmin = require('../middlewares/authAdmin');  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const { Card, Pool } = require('../../db/models');
const fs = require('fs');

const uploadDir = path.resolve(__dirname, '../../public/images');

if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

router.use(verifyAccessToken);
router.use(authAdmin);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∏—Ü—Ü—ã
router.post('/add', upload.single('img'), async (req, res) => {
  const { name, body } = req.body;
  console.log("üöÄ ~ router.post ~ body:", body);
  console.log("üöÄ ~ router.post ~ name:", name);
  const imgPath = req.file ? `${req.file.filename}` : null;

  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∏—Ü—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newCard = await Card.create({
      name,
      body,
      img: imgPath,
    });
    res.status(201).json({ message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', Card: newCard });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏', error: error.message });
  }
});

router.get('/pools', async (req, res) => {
  try {
    const pools = await Pool.findAll();  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏ Pools
    res.status(200).json(pools);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

module.exports = router;
